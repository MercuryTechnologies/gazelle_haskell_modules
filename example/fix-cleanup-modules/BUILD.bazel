load("@rules_haskell//haskell/experimental:defs.bzl", "haskell_module")
load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

# Test that when the src for a module is deleted, the fix command
# will
# * remove the haskell_module
# * remove the mentions of the haskell_module from the modules of other targets
# * leave alone haskell_library/binary/test rules marked with keep
#
# In this package, src/PackageB/Other/B.hs has been deleted, and hence
# fix-cleanup-modules.PackageB.Other.B
# should be deleted and removed from the modules list and hidden_modules list of fix-cleanup-modules.
#
# The build will fail if this does not happen, as we are referencing a non-existent file.
#
# Similarly, if hidden_modules which are not meant to be deleted aren't preserved,
# GHC will complain about ambiguity when building test, since two dependencies
# exposing PackageB.Other.D would exist.


haskell_library(
    name = "fix-cleanup-modules",
    ghcopts = [
        "-DVERSION_package_b=\"0.1.0.0\"",
        "-XScopedTypeVariables",
        "-lm",
    ],
    hidden_modules = [
        "PackageB.Other.B",
        "PackageB.Other.D",
    ],
    modules = [
        ":fix-cleanup-modules.PackageB.Exposed.A",
        ":fix-cleanup-modules.PackageB.Other.B",
        ":fix-cleanup-modules.PackageB.Other.D",
    ],
    narrowed_deps = [
        "//package-a",
        "//package-a:package-a-v2",
    ],
    version = "0.1.0.0",
    visibility = ["//visibility:public"],
    deps = [
        "@stackage//:base",
        "@stackage//:void",
    ],
)

# gazelle_haskell_modules:keep
haskell_library(
    name = "left-alone",
    ghcopts = [
        "-DVERSION_package_b=\"0.1.0.0\"",
        "-XScopedTypeVariables",
        "-lm",
    ],
    hidden_modules = [
        "PackageB.Exposed.A",
    ],
    srcs = [
        "src/PackageB/Exposed/A.hs",
        "src/PackageB/Other/D.hs",
    ],
    version = "0.1.0.0",
    visibility = ["//visibility:public"],
    deps = [
        "//package-a",
        "//package-a:package-a-v2",
        "@stackage//:base",
        "@stackage//:void",
    ],
)

# gazelle_haskell_modules:keep
haskell_test(
    name = "test",
    srcs = [
        "tests/Main.hs",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":fix-cleanup-modules",
        ":left-alone",
        "@stackage//:base",
    ],
)

# This module should be deleted.
#
# rule generated by gazelle_haskell_modules
haskell_module(
    name = "fix-cleanup-modules.PackageB.Other.B",
    src = "src/PackageB/Other/B.hs",
    cross_library_deps = [
        "//package-a:package-a.PackageA.Exposed.A",
        "//package-a:package-a-v2.PackageA.Exposed.A",
    ],
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "fix-cleanup-modules.PackageB.Other.D",
    src = "src/PackageB/Other/D.hs",
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "fix-cleanup-modules.PackageB.Exposed.A",
    src = "src/PackageB/Exposed/A.hs",
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [":fix-cleanup-modules.PackageB.Other.B"],
)
