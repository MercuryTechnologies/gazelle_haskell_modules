load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_test",
    "haskell_toolchain_library",
)

package(default_visibility = ["//visibility:public"])

haskell_toolchain_library(name = "base")

haskell_toolchain_library(name = "bytestring")

haskell_toolchain_library(name = "containers")

haskell_toolchain_library(name = "directory")

haskell_toolchain_library(name = "ghc")

# Only necessary to be able to import GHC.Platform in HImportScan.GHC.Settings
# TODO[GL]: we can probably remove this once we only support ghc >=9.2
haskell_toolchain_library(name = "ghc-boot")

haskell_toolchain_library(name = "text")

haskell_library(
    name = "himportscan-library",
    srcs = glob(["src/**/*.hs"]),
    compiler_flags = [
        "-Wall",
        "-Werror",
    ],
    deps = [
        ":base",
        ":bytestring",
        ":containers",
        ":directory",
        ":ghc",
        ":ghc-boot",
        ":text",
        "@io_tweag_gazelle_haskell_modules_deps//:aeson",
    ],
)

haskell_binary(
    name = "himportscan",
    srcs = ["exe/Main.hs"],
    compiler_flags = [
        "-Wall",
        "-Werror",
    ],
    deps = [
        ":base",
        ":bytestring",
        ":containers",
        ":ghc",
        ":himportscan-library",
        ":text",
        "@io_tweag_gazelle_haskell_modules_deps//:aeson",
        "@io_tweag_gazelle_haskell_modules_deps//:ghc-paths",
    ],
)

haskell_test(
    name = "tasty",
    srcs = glob(["tests/**/*.hs"]),
    compiler_flags = [
        "-Wall",
        "-Werror",
        "-DTASTY_DISCOVER_TASTY_DISCOVER_PATH=$(location @stackage-exe//tasty-discover)",
    ],
    tools = [
        "@stackage-exe//tasty-discover",
    ],
    deps = [
        ":base",
        ":containers",
        ":himportscan-library",
        ":text",
        "@stackage//:ghc-paths",
        "@stackage//:hspec",
        "@stackage//:string-qq",
        "@stackage//:tasty",
        "@stackage//:tasty-hspec",
    ],
)
